@charset "UTF-8";

// Set base em
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.base-em", 16, true);

// Sets the relative width of a single grid gutter.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.gutter", 1%, true);

// Sets the total number of columns in the grid.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.columns", 12, true);

// Sets the max-width property of the element that includes `outer-container()`.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.max-width", 1200px, true);

// Set your own class names.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.container-class", "row", true);

@include config-set("grider.column-class.tiny", "tiny", true);
@include config-set("grider.column-class.small", "small", true);
@include config-set("grider.column-class.medium", "medium", true);
@include config-set("grider.column-class.large", "large", true);
@include config-set("grider.column-class.xlarge", "xlarge", true);

@include config-set("grider.push-class", "push", true);
@include config-set("grider.pull-class", "pull", true);

// When set to true, it sets the box-sizing property of all elements to `border-box`.
//
// @example css - CSS Output
//   html {
//     box-sizing: border-box; }
//
//   *, *::after, *::before {
//     box-sizing: inherit;
//   }
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.border-box-sizing," true, true);

//Sets the default layout direction of the grid. Can be `LTR` or `RTL`.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.layout-direction", LTR, true);

// Is this build mobile first? Setting to ‘true’ means that all grids will be
// 100% width if you do not apply a more specific class to them.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.mobile-first", true, true);

// Would you like push and pull classes enabled?
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.pull", false, true);
@include config-set("grider.push", false, true);

// Would you like to use grider in ie8?
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.ie8.fallback", false, true);

// Displays the visual grid when set to true.
// The overlaid grid may be few pixels off depending on the browser's rendering engine and pixel rounding algorithm.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.visual-grid", false, true);

// Sets the visual grid color.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.visual-grid.color", #eee, true);

// Sets the opacity property of the visual grid.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.visual-grid.opacity", 0.4, true);

// Sets the z-index property of the visual grid.
// Can be back (behind content) or front (in front of content).
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("grider.visual-grid.index", "back", true);
